package com.nxt.net.baseapp.base;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.ViewTreeObserver;import com.jess.arms.base.BaseFragment;import com.jess.arms.base.delegate.IFragment;import com.jess.arms.integration.lifecycle.FragmentLifecycleable;import com.jess.arms.mvp.BasePresenter;import com.jess.arms.mvp.IPresenter;import com.nxt.net.baseapp.app.utils.TransitionHelper;import com.nxt.net.baseapp.utils.GenericHelper;import com.trello.rxlifecycle2.android.FragmentEvent;import java.util.HashMap;import java.util.Map;import javax.inject.Inject;import butterknife.ButterKnife;import butterknife.Unbinder;import io.reactivex.subjects.BehaviorSubject;import io.reactivex.subjects.Subject;/** * @author Jan Maven * @date 2017/10/23 14:07 * @email cyjiang_11@163.com */public abstract class BaseMjFragment<P extends IPresenter> extends Fragment implements IFragment, FragmentLifecycleable {    protected final String TAG = this.getClass().getSimpleName();    private final BehaviorSubject<FragmentEvent> mLifecycleSubject = BehaviorSubject.create();    @Inject    protected P mPresenter;    private View rootView;    private Unbinder unbinder;    /**     * 是否是打开LoginFragment     */    private boolean introAnimate = false;    /**     * 是否将Fragment删除<br>     * 代表着这个Fragment在跳转到另一个Fragment时会被删除掉<br>     * 处理这个逻辑的方法在MainActivity的goToFragment()方法中     */    private boolean isDeleted = false;    //是否同意返回    private boolean isAgreeBlack = true;    //是否更新过用户信息    private boolean updatedUser = false;    //保存一些数据    private static Map<String, Object> dataSave = new HashMap<>(2);    @NonNull    @Override    public final Subject<FragmentEvent> provideLifecycleSubject() {        return mLifecycleSubject;    }    public BaseMjFragment() {        //必须确保在Fragment实例化时setArguments()        setArguments(new Bundle());    }    /**     * 获取数据     *     * @param key     * @param <D>     * @return     */    public static <D> D getData(String key) {        Object obj = dataSave.get(key);        if (obj == null) {            return null;        } else {            return (D) obj;        }    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        try {            mPresenter = GenericHelper.initPresenter(this);        } catch (Exception e) {            e.printStackTrace();        }//        rootView = inflater.inflate(getLayoutId(), container, false);//        unbinder = ButterKnife.bind(this, rootView);//        return rootView;        return initView(inflater, container, savedInstanceState);    }//    protected abstract int getLayoutId();    public static void clearData() {        dataSave.clear();    }    /**     * 保存数据     *     * @param key     * @param obj     */    public static void saveData(String key, Object obj) {        dataSave.put(key, obj);    }    AnimatorListenerAdapter showShadowListener = new AnimatorListenerAdapter() {        @Override        public void onAnimationEnd(Animator animation) {            super.onAnimationEnd(animation);            isAgreeBlack = true;            Log.e(TAG, "onAnimationEnd: Fragment Animate end");        }    };    @Override    public void onHiddenChanged(boolean hidden) {        super.onHiddenChanged(hidden);        if (updatedUser && !hidden) {            updateUserInfo();            updatedUser = false;        }    }    /**     * 更新显示新的头像     */    protected void updateUserInfo() {    }    /**     * 右上退出这个Fragment     */    public void exitFromMenu() {        TransitionHelper.animateMenuOut(rootView);    }    /**     * 打开菜单时Fragment向上侧身移动     */    public void animateTOMenu() {        TransitionHelper.animateToMenuState(getView(), showShadowListener);    }    /**     * 关闭菜单时，Fragment恢复     */    public void revertFromMenu() {        TransitionHelper.startRevertFromMenu(rootView, showShadowListener);    }    /**     * 是否是打开Fragment的动画     *     * @return     */    public boolean getIntroAnimate() {        return introAnimate;    }    /**     * 如果设置为true则显示Fragment有从左下角显示出来的动画     *     * @param introAnimate     */    public void setIntroAnimate(boolean introAnimate) {        this.introAnimate = introAnimate;    }    /**     * 左下角显示出Fragment的动画     */    public void introAnimate() {        if (!introAnimate) {            return;        }        Log.e(TAG, "introAnimate: Fragment Animate introAnimate start");        rootView.setTranslationY(0);        isAgreeBlack = false;        rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {            @Override            public void onGlobalLayout() {                introAnimate = false;                rootView.getViewTreeObserver().removeOnGlobalLayoutListener(this);                TransitionHelper.startIntroAnim(rootView, showShadowListener);            }        });    }    public boolean isDeleted() {        return isDeleted;    }    public void setDeleted(boolean deleted) {        isDeleted = deleted;    }    /**     * 处理点击返回，处理点击返回键时，动画没有执行完，则不执行操作     *     * @return     */    public boolean clickBack() {        return !isAgreeBlack;    }    public void setUpdatedUser(boolean updatedUser) {        this.updatedUser = updatedUser;    }    @Override    public void onDestroy() {        super.onDestroy();        //释放资源        if (mPresenter != null) {            mPresenter.onDestroy();        }        this.mPresenter = null;    }    /**     * 是否使用eventBus,默认为使用(true)，     *     * @return boolean     */    @Override    public boolean useEventBus() {        return true;    }}