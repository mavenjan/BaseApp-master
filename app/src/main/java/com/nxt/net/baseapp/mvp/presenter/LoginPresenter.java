package com.nxt.net.baseapp.mvp.presenter;import android.app.Application;import android.util.Log;import com.cauc.mavenj.app.Constant;import com.cauc.mavenj.dialog.BaseJsonCallback;import com.cauc.mavenj.utils.SharePrefHelper;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.jess.arms.integration.AppManager;import com.jess.arms.di.scope.ActivityScope;import com.jess.arms.mvp.BasePresenter;import com.jess.arms.http.imageloader.ImageLoader;import me.jessyan.rxerrorhandler.core.RxErrorHandler;import okhttp3.Call;import javax.inject.Inject;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.lzy.okgo.model.Response;import com.nxt.net.baseapp.app.Constants;import com.nxt.net.baseapp.mvp.contract.LoginContract;import com.nxt.net.baseapp.mvp.model.ResultDto;import com.nxt.net.baseapp.mvp.model.UserEntity;import com.nxt.net.baseapp.utils.LoginCheck;import static com.lzy.okgo.OkGo.post;/** * @author Maven Jan * @time * @describe 描述 */@ActivityScopepublic class LoginPresenter extends BasePresenter<LoginContract.Model, LoginContract.View> implements LoginContract.Presenter {    private RxErrorHandler mErrorHandler;    private Application mApplication;    private ImageLoader mImageLoader;    private AppManager mAppManager;    @Inject    public LoginPresenter(LoginContract.Model model, LoginContract.View rootView            , RxErrorHandler handler, Application application            , ImageLoader imageLoader, AppManager appManager) {        super(model, rootView);        this.mErrorHandler = handler;        this.mApplication = application;        this.mImageLoader = imageLoader;        this.mAppManager = appManager;    }    public LoginPresenter(LoginContract.View view) {        super(view);    }    @Override    public void checkUsername(String username) {        String value = LoginCheck.checkAccount(username);        if (value == null) {            return;        }        mRootView.nameFormatError(value);    }    @Override    public void checkUsernameUseAble(String username) {        Log.e(TAG, "checkUsernameUseAble: isOrnot------->" + "99999999999999999" );        OkGo.<ResultDto>post(Constants.CHECK_PHONE_URL)                .tag(this)                .params("tel_vc", username)                .execute(new BaseJsonCallback<ResultDto>() {                    @Override                    public void onSuccess(Response<ResultDto> response) {                        Log.e(TAG, "onSuccess: result---------->" + response);                        Log.e(TAG, "onSuccess: result---------->" + response.body().getCode());                        String value = null;                        switch (response.body().getCode()) {                            case 0:                                value = LoginCheck.checkAccountUseAble(0);                                break;                            case 1:                                value = LoginCheck.checkAccountUseAble(1);                                break;                            default:                                break;                        }                        getValue(value);                    }                    private void getValue(String value) {                        if (value == null) {                            return;                        }                        mRootView.nameFormatError(value);                    }                });    }    @Override    public void checkPassword(String password) {        String value = LoginCheck.checkPassword(password);        if (value == null) {            return;        }        mRootView.passwordFormatError(value);    }    @Override    public void requestLogin(String name, String password) {        String nameErr = LoginCheck.checkAccount(name);        String passwordErr = LoginCheck.checkPassword(password);        if (nameErr != null) {            mRootView.nameFormatError(nameErr);            return;        }        if (passwordErr != null) {            mRootView.passwordFormatError(passwordErr);            return;        }        OkGo.<UserEntity>post(Constants.LOGIN_URL)                .tag(this)                .params("account_vc", name)                .params("password_vc", password)                .execute(new BaseJsonCallback<UserEntity>() {                    @Override                    public void onSuccess(Response<UserEntity> response) {                        if (response.body().getCode() == 1) {                            SharePrefHelper.put(Constants.USER_DATA, response.body());                            //缓存发布人信息                            SharePrefHelper.put(Constants.USER_ID, response.body().getUser().getId_vc());                            mRootView.callLoginSuccess();                        } else {                            mRootView.callLoginFail(response.body().getMsg());                        }                    }                });    }    @Override    public void onDestroy() {        super.onDestroy();        this.mErrorHandler = null;        this.mAppManager = null;        this.mImageLoader = null;        this.mApplication = null;    }}