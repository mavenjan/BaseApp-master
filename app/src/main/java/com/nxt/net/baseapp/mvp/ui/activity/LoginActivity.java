package com.nxt.net.baseapp.mvp.ui.activity;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.support.annotation.NonNull;import android.util.Log;import com.jess.arms.di.component.AppComponent;import com.jess.arms.utils.ArmsUtils;import com.nxt.net.baseapp.activity.MainActivity;import com.nxt.net.baseapp.app.C;import com.nxt.net.baseapp.base.BaseMjActivity;import com.nxt.net.baseapp.base.BaseMjFragment;import com.nxt.net.baseapp.di.component.DaggerLoginComponent;import com.nxt.net.baseapp.di.module.LoginModule;import com.nxt.net.baseapp.mvp.contract.LoginContract;import com.nxt.net.baseapp.mvp.model.Msg;import com.nxt.net.baseapp.mvp.presenter.LoginPresenter;import com.nxt.net.baseapp.R;import com.nxt.net.baseapp.mvp.ui.fragment.FragmentFactory;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import static com.jess.arms.utils.Preconditions.checkNotNull;/** * @author Maven Jan * @time * @describe 描述 */public class LoginActivity extends BaseMjActivity<LoginPresenter> implements LoginContract.View {    private BaseMjFragment currentFragment;    private static boolean isMenuVisible = false;    private static String previousFragmentName;    private Handler handler;    @Override    public void setupActivityComponent(AppComponent appComponent) {        DaggerLoginComponent //如找不到该类,请编译一下项目                .builder()                .appComponent(appComponent)                .loginModule(new LoginModule(this))                .build()                .inject(this);    }    private AnimatorListenerAdapter animListener = new AnimatorListenerAdapter() {        @Override        public void onAnimationEnd(Animator animation) {            super.onAnimationEnd(animation);            Log.e(TAG, "onAnimationEnd: isMenuVisible =" + isMenuVisible);            isMenuVisible = !isMenuVisible;        }    };    @Override    public int initView(Bundle savedInstanceState) {        return R.layout.activity_login;    }    @Override    public void initData(Bundle savedInstanceState) {        Log.e(TAG, "initData: isStarted---------->" + "Yeas!!!!");        currentFragment = FragmentFactory.newFragment(C.fragment.LOGIN);        addFragment(currentFragment, R.id.fragment_container);        handler = new Handler(Looper.getMainLooper());    }    @Override    public void showLoading() {    }    @Override    public void hideLoading() {    }    @Override    public void showMessage(@NonNull String message) {        checkNotNull(message);        ArmsUtils.snackbarText(message);    }    @Override    public void launchActivity(@NonNull Intent intent) {        checkNotNull(intent);        ArmsUtils.startActivity(intent);    }    @Override    public void killMyself() {        finish();    }    /**     * 跳转到另一个fragment     *     * @param fragmentKey fragment对应的key值     */    public void goToFragment(String fragmentKey) {        BaseMjFragment newFragment = FragmentFactory.getOrCreate(fragmentKey);        currentFragment.exitFromMenu();        final BaseMjFragment oldFragment = currentFragment;        previousFragmentName = oldFragment.getClass().getSimpleName();        currentFragment = newFragment;        newFragment.setIntroAnimate(true);        if (newFragment.isAdded()) {            Log.e(TAG, "goToFragment: 已经添加" + newFragment.getClass().getSimpleName() + "，显示");            getSupportFragmentManager().beginTransaction().show(newFragment).commit();            newFragment.introAnimate();        } else {            Log.e(TAG, "goToFragment: 没有添加" + newFragment.getClass().getSimpleName() + "，添加显示");            getSupportFragmentManager().beginTransaction().add(R.id.fragment_container, newFragment).commit();        }        handler.postDelayed(new Runnable() {            @Override            public void run() {                if (oldFragment.isDeleted()) {                    getSupportFragmentManager().beginTransaction().remove(oldFragment).commit();                    FragmentFactory.rmFrag(oldFragment.getClass().getSimpleName());                } else {                    getSupportFragmentManager().beginTransaction().hide(oldFragment).commit();                }            }        }, 2000);    }    @Override    public void nameFormatError(String err) {    }    @Override    public void passwordFormatError(String err) {    }    @Override    public void callLoginSuccess() {        startActivity(new Intent(LoginActivity.this, MainActivity.class));    }    @Override    public void callLoginFail(String failMassage) {    }    @Override    public void onPointerCaptureChanged(boolean hasCapture) {    }     /*     * eventBus事件处理     * ----------------------------------------------------------------------     */    @Override    protected void onStart() {        super.onStart();        EventBus.getDefault().register(this);    }    @Override    protected void onStop() {        super.onStop();        EventBus.getDefault().unregister(this);    }    @Override    protected void onDestroy() {        super.onDestroy();//        FirHelper.getInstance().destroy();    }    /**     * 通过fragmentKey启动对应的Fragment     *     * @param fragmentKey     */    public static void startFragment(String fragmentKey) {        EventBus.getDefault().post(new Msg(Msg.GOTO_FRAGMENT, fragmentKey));    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onMsgEvent(Msg msg) {        switch (msg.type) {            case Msg.GOTO_FRAGMENT:                goToFragment(msg.fragment);                break;            case Msg.CLICK_BACK:                onBackPressed();                break;            default:                break;        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        currentFragment.onActivityResult(requestCode, resultCode, data);    }    public static String getPreviousFragmentName() {        return previousFragmentName;    }}