package com.nxt.net.baseapp.base;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.content.Context;import android.os.Bundle;import android.support.annotation.IdRes;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.util.AttributeSet;import android.view.View;import com.jess.arms.base.delegate.IActivity;import com.jess.arms.integration.lifecycle.ActivityLifecycleable;import com.jess.arms.mvp.IPresenter;import com.nxt.net.baseapp.utils.LeakUtil;import com.trello.rxlifecycle2.android.ActivityEvent;import android.support.v4.app.FragmentManager.FragmentLifecycleCallbacks;import javax.inject.Inject;import butterknife.ButterKnife;import butterknife.Unbinder;import io.reactivex.subjects.BehaviorSubject;import io.reactivex.subjects.Subject;import static com.jess.arms.utils.ThirdViewUtil.convertAutoView;/** * @author Jan Maven * @date 2017/11/23 16:21 * @email cyjiang_11@163.com */public abstract class BaseMjActivity<P extends IPresenter> extends AppCompatActivity implements IActivity, ActivityLifecycleable {    protected final String TAG = this.getClass().getSimpleName();    private Unbinder mUnbinder;    private final BehaviorSubject<ActivityEvent> mLifecycleSubject = BehaviorSubject.create();    @Inject    protected P mPresenter;    @NonNull    @Override    public final Subject<ActivityEvent> provideLifecycleSubject() {        return mLifecycleSubject;    }    @Override    public View onCreateView(String name, Context context, AttributeSet attrs) {        View view = convertAutoView(name, context, attrs);        return view == null ? super.onCreateView(name, context, attrs) : view;    }    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        try {            int layoutResID = initView(savedInstanceState);            //如果initView返回0,框架则不会调用setContentView(),当然也不会 Bind ButterKnife            if (layoutResID != 0) {                setContentView(layoutResID);                //绑定到butterknife                mUnbinder = ButterKnife.bind(this);            }        } catch (Exception e) {            e.printStackTrace();        }        initData(savedInstanceState);    }    @Override    protected void onDestroy() {        super.onDestroy();        LeakUtil.fixInputMethodManagerLeak(this);        if (mUnbinder != null && mUnbinder != Unbinder.EMPTY) {            mUnbinder.unbind();        }        this.mUnbinder = null;        if (mPresenter != null) {            //释放资源            mPresenter.onDestroy();        }        this.mPresenter = null;    }    /**     * 是否使用eventBus,默认为使用(true)，     *     * @return boolean     */    @Override    public boolean useEventBus() {        return true;    }    /**     * 这个Activity是否会使用Fragment,框架会根据这个属性判断是否注册{@link FragmentLifecycleCallbacks}     * 如果返回false,那意味着这个Activity不需要绑定Fragment,那你再在这个Activity中绑定继承于 {@link com.jess.arms.base.BaseFragment} 的Fragment将不起任何作用     *     * @return     */    @Override    public boolean useFragment() {        return true;    }    /**     * 添加Fragment     */    protected void addFragment(Fragment fragment, @IdRes int idRes) {       FragmentManager manager = getSupportFragmentManager();        String tag = fragment.getClass().getSimpleName();        Fragment f = manager.findFragmentByTag(tag);        if (f == null) {            manager.beginTransaction().add(idRes, fragment, tag).commit();        }    }}